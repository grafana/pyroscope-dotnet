// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile.proto

#include "profile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perftools {
namespace profiles {
PROTOBUF_CONSTEXPR Profile::Profile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_type_)*/{}
  , /*decltype(_impl_.sample_)*/{}
  , /*decltype(_impl_.mapping_)*/{}
  , /*decltype(_impl_.location_)*/{}
  , /*decltype(_impl_.function_)*/{}
  , /*decltype(_impl_.string_table_)*/{}
  , /*decltype(_impl_.comment_)*/{}
  , /*decltype(_impl_._comment_cached_byte_size_)*/{0}
  , /*decltype(_impl_.period_type_)*/nullptr
  , /*decltype(_impl_.drop_frames_)*/int64_t{0}
  , /*decltype(_impl_.keep_frames_)*/int64_t{0}
  , /*decltype(_impl_.time_nanos_)*/int64_t{0}
  , /*decltype(_impl_.duration_nanos_)*/int64_t{0}
  , /*decltype(_impl_.period_)*/int64_t{0}
  , /*decltype(_impl_.default_sample_type_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfileDefaultTypeInternal() {}
  union {
    Profile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfileDefaultTypeInternal _Profile_default_instance_;
PROTOBUF_CONSTEXPR ValueType::ValueType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/int64_t{0}
  , /*decltype(_impl_.unit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueTypeDefaultTypeInternal() {}
  union {
    ValueType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueTypeDefaultTypeInternal _ValueType_default_instance_;
PROTOBUF_CONSTEXPR Sample::Sample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_id_)*/{}
  , /*decltype(_impl_._location_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._value_cached_byte_size_)*/{0}
  , /*decltype(_impl_.label_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SampleDefaultTypeInternal() {}
  union {
    Sample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SampleDefaultTypeInternal _Sample_default_instance_;
PROTOBUF_CONSTEXPR Label::Label(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/int64_t{0}
  , /*decltype(_impl_.str_)*/int64_t{0}
  , /*decltype(_impl_.num_)*/int64_t{0}
  , /*decltype(_impl_.num_unit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelDefaultTypeInternal() {}
  union {
    Label _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelDefaultTypeInternal _Label_default_instance_;
PROTOBUF_CONSTEXPR Mapping::Mapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_start_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.file_offset_)*/uint64_t{0u}
  , /*decltype(_impl_.filename_)*/int64_t{0}
  , /*decltype(_impl_.build_id_)*/int64_t{0}
  , /*decltype(_impl_.has_functions_)*/false
  , /*decltype(_impl_.has_filenames_)*/false
  , /*decltype(_impl_.has_line_numbers_)*/false
  , /*decltype(_impl_.has_inline_frames_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MappingDefaultTypeInternal() {}
  union {
    Mapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MappingDefaultTypeInternal _Mapping_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_)*/{}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.mapping_id_)*/uint64_t{0u}
  , /*decltype(_impl_.address_)*/uint64_t{0u}
  , /*decltype(_impl_.is_folded_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Line::Line(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_id_)*/uint64_t{0u}
  , /*decltype(_impl_.line_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefaultTypeInternal() {}
  union {
    Line _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefaultTypeInternal _Line_default_instance_;
PROTOBUF_CONSTEXPR Function::Function(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.name_)*/int64_t{0}
  , /*decltype(_impl_.system_name_)*/int64_t{0}
  , /*decltype(_impl_.filename_)*/int64_t{0}
  , /*decltype(_impl_.start_line_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionDefaultTypeInternal() {}
  union {
    Function _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionDefaultTypeInternal _Function_default_instance_;
}  // namespace profiles
}  // namespace perftools
static ::_pb::Metadata file_level_metadata_profile_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_profile_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_profile_2eproto = nullptr;

const uint32_t TableStruct_profile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.sample_type_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.sample_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.mapping_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.function_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.string_table_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.drop_frames_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.keep_frames_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.time_nanos_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.duration_nanos_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.period_type_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Profile, _impl_.default_sample_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::ValueType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::ValueType, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::ValueType, _impl_.unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Sample, _impl_.location_id_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Sample, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Sample, _impl_.label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Label, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Label, _impl_.str_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Label, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Label, _impl_.num_unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.memory_start_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.memory_limit_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.file_offset_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.build_id_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.has_functions_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.has_filenames_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.has_line_numbers_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Mapping, _impl_.has_inline_frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Location, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Location, _impl_.mapping_id_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Location, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Location, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Location, _impl_.is_folded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Line, _impl_.function_id_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Line, _impl_.line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Function, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Function, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Function, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Function, _impl_.system_name_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Function, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::perftools::profiles::Function, _impl_.start_line_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::perftools::profiles::Profile)},
  { 20, -1, -1, sizeof(::perftools::profiles::ValueType)},
  { 28, -1, -1, sizeof(::perftools::profiles::Sample)},
  { 37, -1, -1, sizeof(::perftools::profiles::Label)},
  { 47, -1, -1, sizeof(::perftools::profiles::Mapping)},
  { 63, -1, -1, sizeof(::perftools::profiles::Location)},
  { 74, -1, -1, sizeof(::perftools::profiles::Line)},
  { 82, -1, -1, sizeof(::perftools::profiles::Function)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::perftools::profiles::_Profile_default_instance_._instance,
  &::perftools::profiles::_ValueType_default_instance_._instance,
  &::perftools::profiles::_Sample_default_instance_._instance,
  &::perftools::profiles::_Label_default_instance_._instance,
  &::perftools::profiles::_Mapping_default_instance_._instance,
  &::perftools::profiles::_Location_default_instance_._instance,
  &::perftools::profiles::_Line_default_instance_._instance,
  &::perftools::profiles::_Function_default_instance_._instance,
};

const char descriptor_table_protodef_profile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rprofile.proto\022\022perftools.profiles\"\325\003\n\007"
  "Profile\0222\n\013sample_type\030\001 \003(\0132\035.perftools"
  ".profiles.ValueType\022*\n\006sample\030\002 \003(\0132\032.pe"
  "rftools.profiles.Sample\022,\n\007mapping\030\003 \003(\013"
  "2\033.perftools.profiles.Mapping\022.\n\010locatio"
  "n\030\004 \003(\0132\034.perftools.profiles.Location\022.\n"
  "\010function\030\005 \003(\0132\034.perftools.profiles.Fun"
  "ction\022\024\n\014string_table\030\006 \003(\t\022\023\n\013drop_fram"
  "es\030\007 \001(\003\022\023\n\013keep_frames\030\010 \001(\003\022\022\n\ntime_na"
  "nos\030\t \001(\003\022\026\n\016duration_nanos\030\n \001(\003\0222\n\013per"
  "iod_type\030\013 \001(\0132\035.perftools.profiles.Valu"
  "eType\022\016\n\006period\030\014 \001(\003\022\017\n\007comment\030\r \003(\003\022\033"
  "\n\023default_sample_type\030\016 \001(\003\"\'\n\tValueType"
  "\022\014\n\004type\030\001 \001(\003\022\014\n\004unit\030\002 \001(\003\"V\n\006Sample\022\023"
  "\n\013location_id\030\001 \003(\004\022\r\n\005value\030\002 \003(\003\022(\n\005la"
  "bel\030\003 \003(\0132\031.perftools.profiles.Label\"@\n\005"
  "Label\022\013\n\003key\030\001 \001(\003\022\013\n\003str\030\002 \001(\003\022\013\n\003num\030\003"
  " \001(\003\022\020\n\010num_unit\030\004 \001(\003\"\335\001\n\007Mapping\022\n\n\002id"
  "\030\001 \001(\004\022\024\n\014memory_start\030\002 \001(\004\022\024\n\014memory_l"
  "imit\030\003 \001(\004\022\023\n\013file_offset\030\004 \001(\004\022\020\n\010filen"
  "ame\030\005 \001(\003\022\020\n\010build_id\030\006 \001(\003\022\025\n\rhas_funct"
  "ions\030\007 \001(\010\022\025\n\rhas_filenames\030\010 \001(\010\022\030\n\020has"
  "_line_numbers\030\t \001(\010\022\031\n\021has_inline_frames"
  "\030\n \001(\010\"v\n\010Location\022\n\n\002id\030\001 \001(\004\022\022\n\nmappin"
  "g_id\030\002 \001(\004\022\017\n\007address\030\003 \001(\004\022&\n\004line\030\004 \003("
  "\0132\030.perftools.profiles.Line\022\021\n\tis_folded"
  "\030\005 \001(\010\")\n\004Line\022\023\n\013function_id\030\001 \001(\004\022\014\n\004l"
  "ine\030\002 \001(\003\"_\n\010Function\022\n\n\002id\030\001 \001(\004\022\014\n\004nam"
  "e\030\002 \001(\003\022\023\n\013system_name\030\003 \001(\003\022\020\n\010filename"
  "\030\004 \001(\003\022\022\n\nstart_line\030\005 \001(\003B-\n\035com.google"
  ".perftools.profilesB\014ProfileProtob\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_profile_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_profile_2eproto = {
    false, false, 1241, descriptor_table_protodef_profile_2eproto,
    "profile.proto",
    &descriptor_table_profile_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_profile_2eproto::offsets,
    file_level_metadata_profile_2eproto, file_level_enum_descriptors_profile_2eproto,
    file_level_service_descriptors_profile_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_profile_2eproto_getter() {
  return &descriptor_table_profile_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_profile_2eproto(&descriptor_table_profile_2eproto);
namespace perftools {
namespace profiles {

// ===================================================================

class Profile::_Internal {
 public:
  static const ::perftools::profiles::ValueType& period_type(const Profile* msg);
};

const ::perftools::profiles::ValueType&
Profile::_Internal::period_type(const Profile* msg) {
  return *msg->_impl_.period_type_;
}
Profile::Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perftools.profiles.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Profile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_type_){from._impl_.sample_type_}
    , decltype(_impl_.sample_){from._impl_.sample_}
    , decltype(_impl_.mapping_){from._impl_.mapping_}
    , decltype(_impl_.location_){from._impl_.location_}
    , decltype(_impl_.function_){from._impl_.function_}
    , decltype(_impl_.string_table_){from._impl_.string_table_}
    , decltype(_impl_.comment_){from._impl_.comment_}
    , /*decltype(_impl_._comment_cached_byte_size_)*/{0}
    , decltype(_impl_.period_type_){nullptr}
    , decltype(_impl_.drop_frames_){}
    , decltype(_impl_.keep_frames_){}
    , decltype(_impl_.time_nanos_){}
    , decltype(_impl_.duration_nanos_){}
    , decltype(_impl_.period_){}
    , decltype(_impl_.default_sample_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_period_type()) {
    _this->_impl_.period_type_ = new ::perftools::profiles::ValueType(*from._impl_.period_type_);
  }
  ::memcpy(&_impl_.drop_frames_, &from._impl_.drop_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_sample_type_) -
    reinterpret_cast<char*>(&_impl_.drop_frames_)) + sizeof(_impl_.default_sample_type_));
  // @@protoc_insertion_point(copy_constructor:perftools.profiles.Profile)
}

inline void Profile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_type_){arena}
    , decltype(_impl_.sample_){arena}
    , decltype(_impl_.mapping_){arena}
    , decltype(_impl_.location_){arena}
    , decltype(_impl_.function_){arena}
    , decltype(_impl_.string_table_){arena}
    , decltype(_impl_.comment_){arena}
    , /*decltype(_impl_._comment_cached_byte_size_)*/{0}
    , decltype(_impl_.period_type_){nullptr}
    , decltype(_impl_.drop_frames_){int64_t{0}}
    , decltype(_impl_.keep_frames_){int64_t{0}}
    , decltype(_impl_.time_nanos_){int64_t{0}}
    , decltype(_impl_.duration_nanos_){int64_t{0}}
    , decltype(_impl_.period_){int64_t{0}}
    , decltype(_impl_.default_sample_type_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:perftools.profiles.Profile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Profile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sample_type_.~RepeatedPtrField();
  _impl_.sample_.~RepeatedPtrField();
  _impl_.mapping_.~RepeatedPtrField();
  _impl_.location_.~RepeatedPtrField();
  _impl_.function_.~RepeatedPtrField();
  _impl_.string_table_.~RepeatedPtrField();
  _impl_.comment_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.period_type_;
}

void Profile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:perftools.profiles.Profile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sample_type_.Clear();
  _impl_.sample_.Clear();
  _impl_.mapping_.Clear();
  _impl_.location_.Clear();
  _impl_.function_.Clear();
  _impl_.string_table_.Clear();
  _impl_.comment_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.period_type_ != nullptr) {
    delete _impl_.period_type_;
  }
  _impl_.period_type_ = nullptr;
  ::memset(&_impl_.drop_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.default_sample_type_) -
      reinterpret_cast<char*>(&_impl_.drop_frames_)) + sizeof(_impl_.default_sample_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perftools.profiles.ValueType sample_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sample_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perftools.profiles.Sample sample = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perftools.profiles.Mapping mapping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perftools.profiles.Location location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perftools.profiles.Function function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_function(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string string_table = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_table();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "perftools.profiles.Profile.string_table"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 drop_frames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.drop_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 keep_frames = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.keep_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time_nanos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.time_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration_nanos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.duration_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perftools.profiles.ValueType period_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_period_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 period = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 comment = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_comment(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_comment(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 default_sample_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.default_sample_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Profile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perftools.profiles.Profile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perftools.profiles.ValueType sample_type = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sample_type_size()); i < n; i++) {
    const auto& repfield = this->_internal_sample_type(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perftools.profiles.Sample sample = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perftools.profiles.Mapping mapping = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_mapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perftools.profiles.Location location = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_location_size()); i < n; i++) {
    const auto& repfield = this->_internal_location(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perftools.profiles.Function function = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_function_size()); i < n; i++) {
    const auto& repfield = this->_internal_function(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string string_table = 6;
  for (int i = 0, n = this->_internal_string_table_size(); i < n; i++) {
    const auto& s = this->_internal_string_table(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perftools.profiles.Profile.string_table");
    target = stream->WriteString(6, s, target);
  }

  // int64 drop_frames = 7;
  if (this->_internal_drop_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_drop_frames(), target);
  }

  // int64 keep_frames = 8;
  if (this->_internal_keep_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_keep_frames(), target);
  }

  // int64 time_nanos = 9;
  if (this->_internal_time_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_time_nanos(), target);
  }

  // int64 duration_nanos = 10;
  if (this->_internal_duration_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_duration_nanos(), target);
  }

  // .perftools.profiles.ValueType period_type = 11;
  if (this->_internal_has_period_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::period_type(this),
        _Internal::period_type(this).GetCachedSize(), target, stream);
  }

  // int64 period = 12;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_period(), target);
  }

  // repeated int64 comment = 13;
  {
    int byte_size = _impl_._comment_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          13, _internal_comment(), byte_size, target);
    }
  }

  // int64 default_sample_type = 14;
  if (this->_internal_default_sample_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_default_sample_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perftools.profiles.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perftools.profiles.Profile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perftools.profiles.ValueType sample_type = 1;
  total_size += 1UL * this->_internal_sample_type_size();
  for (const auto& msg : this->_impl_.sample_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perftools.profiles.Sample sample = 2;
  total_size += 1UL * this->_internal_sample_size();
  for (const auto& msg : this->_impl_.sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perftools.profiles.Mapping mapping = 3;
  total_size += 1UL * this->_internal_mapping_size();
  for (const auto& msg : this->_impl_.mapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perftools.profiles.Location location = 4;
  total_size += 1UL * this->_internal_location_size();
  for (const auto& msg : this->_impl_.location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perftools.profiles.Function function = 5;
  total_size += 1UL * this->_internal_function_size();
  for (const auto& msg : this->_impl_.function_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string string_table = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.string_table_.size());
  for (int i = 0, n = _impl_.string_table_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.string_table_.Get(i));
  }

  // repeated int64 comment = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.comment_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._comment_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .perftools.profiles.ValueType period_type = 11;
  if (this->_internal_has_period_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.period_type_);
  }

  // int64 drop_frames = 7;
  if (this->_internal_drop_frames() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_drop_frames());
  }

  // int64 keep_frames = 8;
  if (this->_internal_keep_frames() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_keep_frames());
  }

  // int64 time_nanos = 9;
  if (this->_internal_time_nanos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_nanos());
  }

  // int64 duration_nanos = 10;
  if (this->_internal_duration_nanos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_nanos());
  }

  // int64 period = 12;
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_period());
  }

  // int64 default_sample_type = 14;
  if (this->_internal_default_sample_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_default_sample_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Profile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Profile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Profile::GetClassData() const { return &_class_data_; }


void Profile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Profile*>(&to_msg);
  auto& from = static_cast<const Profile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perftools.profiles.Profile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sample_type_.MergeFrom(from._impl_.sample_type_);
  _this->_impl_.sample_.MergeFrom(from._impl_.sample_);
  _this->_impl_.mapping_.MergeFrom(from._impl_.mapping_);
  _this->_impl_.location_.MergeFrom(from._impl_.location_);
  _this->_impl_.function_.MergeFrom(from._impl_.function_);
  _this->_impl_.string_table_.MergeFrom(from._impl_.string_table_);
  _this->_impl_.comment_.MergeFrom(from._impl_.comment_);
  if (from._internal_has_period_type()) {
    _this->_internal_mutable_period_type()->::perftools::profiles::ValueType::MergeFrom(
        from._internal_period_type());
  }
  if (from._internal_drop_frames() != 0) {
    _this->_internal_set_drop_frames(from._internal_drop_frames());
  }
  if (from._internal_keep_frames() != 0) {
    _this->_internal_set_keep_frames(from._internal_keep_frames());
  }
  if (from._internal_time_nanos() != 0) {
    _this->_internal_set_time_nanos(from._internal_time_nanos());
  }
  if (from._internal_duration_nanos() != 0) {
    _this->_internal_set_duration_nanos(from._internal_duration_nanos());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  if (from._internal_default_sample_type() != 0) {
    _this->_internal_set_default_sample_type(from._internal_default_sample_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perftools.profiles.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sample_type_.InternalSwap(&other->_impl_.sample_type_);
  _impl_.sample_.InternalSwap(&other->_impl_.sample_);
  _impl_.mapping_.InternalSwap(&other->_impl_.mapping_);
  _impl_.location_.InternalSwap(&other->_impl_.location_);
  _impl_.function_.InternalSwap(&other->_impl_.function_);
  _impl_.string_table_.InternalSwap(&other->_impl_.string_table_);
  _impl_.comment_.InternalSwap(&other->_impl_.comment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Profile, _impl_.default_sample_type_)
      + sizeof(Profile::_impl_.default_sample_type_)
      - PROTOBUF_FIELD_OFFSET(Profile, _impl_.period_type_)>(
          reinterpret_cast<char*>(&_impl_.period_type_),
          reinterpret_cast<char*>(&other->_impl_.period_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[0]);
}

// ===================================================================

class ValueType::_Internal {
 public:
};

ValueType::ValueType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perftools.profiles.ValueType)
}
ValueType::ValueType(const ValueType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.unit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unit_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.unit_));
  // @@protoc_insertion_point(copy_constructor:perftools.profiles.ValueType)
}

inline void ValueType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){int64_t{0}}
    , decltype(_impl_.unit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValueType::~ValueType() {
  // @@protoc_insertion_point(destructor:perftools.profiles.ValueType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValueType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueType::Clear() {
// @@protoc_insertion_point(message_clear_start:perftools.profiles.ValueType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unit_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.unit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perftools.profiles.ValueType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_type(), target);
  }

  // int64 unit = 2;
  if (this->_internal_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perftools.profiles.ValueType)
  return target;
}

size_t ValueType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perftools.profiles.ValueType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_type());
  }

  // int64 unit = 2;
  if (this->_internal_unit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueType::GetClassData() const { return &_class_data_; }


void ValueType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueType*>(&to_msg);
  auto& from = static_cast<const ValueType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perftools.profiles.ValueType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_unit() != 0) {
    _this->_internal_set_unit(from._internal_unit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueType::CopyFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perftools.profiles.ValueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueType::IsInitialized() const {
  return true;
}

void ValueType::InternalSwap(ValueType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValueType, _impl_.unit_)
      + sizeof(ValueType::_impl_.unit_)
      - PROTOBUF_FIELD_OFFSET(ValueType, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[1]);
}

// ===================================================================

class Sample::_Internal {
 public:
};

Sample::Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perftools.profiles.Sample)
}
Sample::Sample(const Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_id_){from._impl_.location_id_}
    , /*decltype(_impl_._location_id_cached_byte_size_)*/{0}
    , decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , decltype(_impl_.label_){from._impl_.label_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perftools.profiles.Sample)
}

inline void Sample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_id_){arena}
    , /*decltype(_impl_._location_id_cached_byte_size_)*/{0}
    , decltype(_impl_.value_){arena}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , decltype(_impl_.label_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:perftools.profiles.Sample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_id_.~RepeatedField();
  _impl_.value_.~RepeatedField();
  _impl_.label_.~RepeatedPtrField();
}

void Sample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:perftools.profiles.Sample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_id_.Clear();
  _impl_.value_.Clear();
  _impl_.label_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 location_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_location_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_location_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perftools.profiles.Label label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perftools.profiles.Sample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 location_id = 1;
  {
    int byte_size = _impl_._location_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_location_id(), byte_size, target);
    }
  }

  // repeated int64 value = 2;
  {
    int byte_size = _impl_._value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_value(), byte_size, target);
    }
  }

  // repeated .perftools.profiles.Label label = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_label_size()); i < n; i++) {
    const auto& repfield = this->_internal_label(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perftools.profiles.Sample)
  return target;
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perftools.profiles.Sample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 location_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.location_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._location_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 value = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .perftools.profiles.Label label = 3;
  total_size += 1UL * this->_internal_label_size();
  for (const auto& msg : this->_impl_.label_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sample::GetClassData() const { return &_class_data_; }


void Sample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sample*>(&to_msg);
  auto& from = static_cast<const Sample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perftools.profiles.Sample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.location_id_.MergeFrom(from._impl_.location_id_);
  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_impl_.label_.MergeFrom(from._impl_.label_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perftools.profiles.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  return true;
}

void Sample::InternalSwap(Sample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.location_id_.InternalSwap(&other->_impl_.location_id_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  _impl_.label_.InternalSwap(&other->_impl_.label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[2]);
}

// ===================================================================

class Label::_Internal {
 public:
};

Label::Label(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perftools.profiles.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Label* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.str_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.num_unit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_unit_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.num_unit_));
  // @@protoc_insertion_point(copy_constructor:perftools.profiles.Label)
}

inline void Label::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){int64_t{0}}
    , decltype(_impl_.str_){int64_t{0}}
    , decltype(_impl_.num_){int64_t{0}}
    , decltype(_impl_.num_unit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:perftools.profiles.Label)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Label::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Label::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:perftools.profiles.Label)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_unit_) -
      reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.num_unit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Label::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.str_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_unit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Label::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perftools.profiles.Label)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_key(), target);
  }

  // int64 str = 2;
  if (this->_internal_str() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_str(), target);
  }

  // int64 num = 3;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_num(), target);
  }

  // int64 num_unit = 4;
  if (this->_internal_num_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_num_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perftools.profiles.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perftools.profiles.Label)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_key());
  }

  // int64 str = 2;
  if (this->_internal_str() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_str());
  }

  // int64 num = 3;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num());
  }

  // int64 num_unit = 4;
  if (this->_internal_num_unit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_unit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Label::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Label::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Label::GetClassData() const { return &_class_data_; }


void Label::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Label*>(&to_msg);
  auto& from = static_cast<const Label&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perftools.profiles.Label)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_str() != 0) {
    _this->_internal_set_str(from._internal_str());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_num_unit() != 0) {
    _this->_internal_set_num_unit(from._internal_num_unit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perftools.profiles.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Label, _impl_.num_unit_)
      + sizeof(Label::_impl_.num_unit_)
      - PROTOBUF_FIELD_OFFSET(Label, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[3]);
}

// ===================================================================

class Mapping::_Internal {
 public:
};

Mapping::Mapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perftools.profiles.Mapping)
}
Mapping::Mapping(const Mapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.memory_start_){}
    , decltype(_impl_.memory_limit_){}
    , decltype(_impl_.file_offset_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.build_id_){}
    , decltype(_impl_.has_functions_){}
    , decltype(_impl_.has_filenames_){}
    , decltype(_impl_.has_line_numbers_){}
    , decltype(_impl_.has_inline_frames_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_inline_frames_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.has_inline_frames_));
  // @@protoc_insertion_point(copy_constructor:perftools.profiles.Mapping)
}

inline void Mapping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.memory_start_){uint64_t{0u}}
    , decltype(_impl_.memory_limit_){uint64_t{0u}}
    , decltype(_impl_.file_offset_){uint64_t{0u}}
    , decltype(_impl_.filename_){int64_t{0}}
    , decltype(_impl_.build_id_){int64_t{0}}
    , decltype(_impl_.has_functions_){false}
    , decltype(_impl_.has_filenames_){false}
    , decltype(_impl_.has_line_numbers_){false}
    , decltype(_impl_.has_inline_frames_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:perftools.profiles.Mapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Mapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:perftools.profiles.Mapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_inline_frames_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.has_inline_frames_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 memory_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.memory_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 memory_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.memory_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.file_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 filename = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.filename_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 build_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_functions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.has_functions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_filenames = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.has_filenames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_line_numbers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.has_line_numbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_inline_frames = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.has_inline_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perftools.profiles.Mapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 memory_start = 2;
  if (this->_internal_memory_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_memory_start(), target);
  }

  // uint64 memory_limit = 3;
  if (this->_internal_memory_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_memory_limit(), target);
  }

  // uint64 file_offset = 4;
  if (this->_internal_file_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_file_offset(), target);
  }

  // int64 filename = 5;
  if (this->_internal_filename() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_filename(), target);
  }

  // int64 build_id = 6;
  if (this->_internal_build_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_build_id(), target);
  }

  // bool has_functions = 7;
  if (this->_internal_has_functions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_has_functions(), target);
  }

  // bool has_filenames = 8;
  if (this->_internal_has_filenames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_filenames(), target);
  }

  // bool has_line_numbers = 9;
  if (this->_internal_has_line_numbers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_has_line_numbers(), target);
  }

  // bool has_inline_frames = 10;
  if (this->_internal_has_inline_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_has_inline_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perftools.profiles.Mapping)
  return target;
}

size_t Mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perftools.profiles.Mapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 memory_start = 2;
  if (this->_internal_memory_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_start());
  }

  // uint64 memory_limit = 3;
  if (this->_internal_memory_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_limit());
  }

  // uint64 file_offset = 4;
  if (this->_internal_file_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_offset());
  }

  // int64 filename = 5;
  if (this->_internal_filename() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_filename());
  }

  // int64 build_id = 6;
  if (this->_internal_build_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_build_id());
  }

  // bool has_functions = 7;
  if (this->_internal_has_functions() != 0) {
    total_size += 1 + 1;
  }

  // bool has_filenames = 8;
  if (this->_internal_has_filenames() != 0) {
    total_size += 1 + 1;
  }

  // bool has_line_numbers = 9;
  if (this->_internal_has_line_numbers() != 0) {
    total_size += 1 + 1;
  }

  // bool has_inline_frames = 10;
  if (this->_internal_has_inline_frames() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mapping::GetClassData() const { return &_class_data_; }


void Mapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mapping*>(&to_msg);
  auto& from = static_cast<const Mapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perftools.profiles.Mapping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_memory_start() != 0) {
    _this->_internal_set_memory_start(from._internal_memory_start());
  }
  if (from._internal_memory_limit() != 0) {
    _this->_internal_set_memory_limit(from._internal_memory_limit());
  }
  if (from._internal_file_offset() != 0) {
    _this->_internal_set_file_offset(from._internal_file_offset());
  }
  if (from._internal_filename() != 0) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (from._internal_build_id() != 0) {
    _this->_internal_set_build_id(from._internal_build_id());
  }
  if (from._internal_has_functions() != 0) {
    _this->_internal_set_has_functions(from._internal_has_functions());
  }
  if (from._internal_has_filenames() != 0) {
    _this->_internal_set_has_filenames(from._internal_has_filenames());
  }
  if (from._internal_has_line_numbers() != 0) {
    _this->_internal_set_has_line_numbers(from._internal_has_line_numbers());
  }
  if (from._internal_has_inline_frames() != 0) {
    _this->_internal_set_has_inline_frames(from._internal_has_inline_frames());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perftools.profiles.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {
  return true;
}

void Mapping::InternalSwap(Mapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mapping, _impl_.has_inline_frames_)
      + sizeof(Mapping::_impl_.has_inline_frames_)
      - PROTOBUF_FIELD_OFFSET(Mapping, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[4]);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perftools.profiles.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){from._impl_.line_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.mapping_id_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.is_folded_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_folded_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_folded_));
  // @@protoc_insertion_point(copy_constructor:perftools.profiles.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){arena}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.mapping_id_){uint64_t{0u}}
    , decltype(_impl_.address_){uint64_t{0u}}
    , decltype(_impl_.is_folded_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:perftools.profiles.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.line_.~RepeatedPtrField();
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:perftools.profiles.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.line_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_folded_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_folded_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 mapping_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mapping_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perftools.profiles.Line line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_folded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_folded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perftools.profiles.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 mapping_id = 2;
  if (this->_internal_mapping_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_mapping_id(), target);
  }

  // uint64 address = 3;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_address(), target);
  }

  // repeated .perftools.profiles.Line line = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_folded = 5;
  if (this->_internal_is_folded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_folded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perftools.profiles.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perftools.profiles.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perftools.profiles.Line line = 4;
  total_size += 1UL * this->_internal_line_size();
  for (const auto& msg : this->_impl_.line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 mapping_id = 2;
  if (this->_internal_mapping_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mapping_id());
  }

  // uint64 address = 3;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_address());
  }

  // bool is_folded = 5;
  if (this->_internal_is_folded() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perftools.profiles.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.line_.MergeFrom(from._impl_.line_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_mapping_id() != 0) {
    _this->_internal_set_mapping_id(from._internal_mapping_id());
  }
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_is_folded() != 0) {
    _this->_internal_set_is_folded(from._internal_is_folded());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perftools.profiles.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.line_.InternalSwap(&other->_impl_.line_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.is_folded_)
      + sizeof(Location::_impl_.is_folded_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[5]);
}

// ===================================================================

class Line::_Internal {
 public:
};

Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perftools.profiles.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Line* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_id_){}
    , decltype(_impl_.line_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.function_id_, &from._impl_.function_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.line_) -
    reinterpret_cast<char*>(&_impl_.function_id_)) + sizeof(_impl_.line_));
  // @@protoc_insertion_point(copy_constructor:perftools.profiles.Line)
}

inline void Line::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.function_id_){uint64_t{0u}}
    , decltype(_impl_.line_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:perftools.profiles.Line)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Line::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Line::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:perftools.profiles.Line)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.function_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.line_) -
      reinterpret_cast<char*>(&_impl_.function_id_)) + sizeof(_impl_.line_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 function_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.function_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Line::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perftools.profiles.Line)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 function_id = 1;
  if (this->_internal_function_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_function_id(), target);
  }

  // int64 line = 2;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perftools.profiles.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perftools.profiles.Line)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 function_id = 1;
  if (this->_internal_function_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_function_id());
  }

  // int64 line = 2;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Line::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line::GetClassData() const { return &_class_data_; }


void Line::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Line*>(&to_msg);
  auto& from = static_cast<const Line&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perftools.profiles.Line)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_function_id() != 0) {
    _this->_internal_set_function_id(from._internal_function_id());
  }
  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perftools.profiles.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line, _impl_.line_)
      + sizeof(Line::_impl_.line_)
      - PROTOBUF_FIELD_OFFSET(Line, _impl_.function_id_)>(
          reinterpret_cast<char*>(&_impl_.function_id_),
          reinterpret_cast<char*>(&other->_impl_.function_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[6]);
}

// ===================================================================

class Function::_Internal {
 public:
};

Function::Function(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perftools.profiles.Function)
}
Function::Function(const Function& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Function* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.system_name_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.start_line_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.start_line_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.start_line_));
  // @@protoc_insertion_point(copy_constructor:perftools.profiles.Function)
}

inline void Function::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.name_){int64_t{0}}
    , decltype(_impl_.system_name_){int64_t{0}}
    , decltype(_impl_.filename_){int64_t{0}}
    , decltype(_impl_.start_line_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:perftools.profiles.Function)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Function::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Function::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:perftools.profiles.Function)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.start_line_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.start_line_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Function::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 system_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.system_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.filename_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.start_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Function::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perftools.profiles.Function)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 name = 2;
  if (this->_internal_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_name(), target);
  }

  // int64 system_name = 3;
  if (this->_internal_system_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_system_name(), target);
  }

  // int64 filename = 4;
  if (this->_internal_filename() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_filename(), target);
  }

  // int64 start_line = 5;
  if (this->_internal_start_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_start_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perftools.profiles.Function)
  return target;
}

size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perftools.profiles.Function)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // int64 name = 2;
  if (this->_internal_name() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_name());
  }

  // int64 system_name = 3;
  if (this->_internal_system_name() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_system_name());
  }

  // int64 filename = 4;
  if (this->_internal_filename() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_filename());
  }

  // int64 start_line = 5;
  if (this->_internal_start_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Function::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Function::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Function::GetClassData() const { return &_class_data_; }


void Function::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Function*>(&to_msg);
  auto& from = static_cast<const Function&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perftools.profiles.Function)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_name() != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_system_name() != 0) {
    _this->_internal_set_system_name(from._internal_system_name());
  }
  if (from._internal_filename() != 0) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (from._internal_start_line() != 0) {
    _this->_internal_set_start_line(from._internal_start_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perftools.profiles.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  return true;
}

void Function::InternalSwap(Function* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Function, _impl_.start_line_)
      + sizeof(Function::_impl_.start_line_)
      - PROTOBUF_FIELD_OFFSET(Function, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Function::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_profile_2eproto_getter, &descriptor_table_profile_2eproto_once,
      file_level_metadata_profile_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace profiles
}  // namespace perftools
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perftools::profiles::Profile*
Arena::CreateMaybeMessage< ::perftools::profiles::Profile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perftools::profiles::Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::perftools::profiles::ValueType*
Arena::CreateMaybeMessage< ::perftools::profiles::ValueType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perftools::profiles::ValueType >(arena);
}
template<> PROTOBUF_NOINLINE ::perftools::profiles::Sample*
Arena::CreateMaybeMessage< ::perftools::profiles::Sample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perftools::profiles::Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::perftools::profiles::Label*
Arena::CreateMaybeMessage< ::perftools::profiles::Label >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perftools::profiles::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::perftools::profiles::Mapping*
Arena::CreateMaybeMessage< ::perftools::profiles::Mapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perftools::profiles::Mapping >(arena);
}
template<> PROTOBUF_NOINLINE ::perftools::profiles::Location*
Arena::CreateMaybeMessage< ::perftools::profiles::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perftools::profiles::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::perftools::profiles::Line*
Arena::CreateMaybeMessage< ::perftools::profiles::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perftools::profiles::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::perftools::profiles::Function*
Arena::CreateMaybeMessage< ::perftools::profiles::Function >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perftools::profiles::Function >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
